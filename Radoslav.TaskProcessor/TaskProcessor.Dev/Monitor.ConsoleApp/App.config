<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="Radoslav.ServiceLocator" type="Radoslav.ServiceLocator.Configuration.ServiceLocatorConfiguration, Radoslav.ServiceLocator" />
    <section name="Radoslav.TaskProcessor" type="Radoslav.TaskProcessor.Configuration.AppConfig.TaskProcessorConfigurationSection, Radoslav.TaskProcessor.Configuration.AppConfig" />
    <section name="Radoslav.TaskProcessor.Client" type="Radoslav.TaskProcessor.Configuration.AppConfig.ClientConfigurationSection, Radoslav.TaskProcessor.Configuration.AppConfig" />
    <section name="Radoslav.TaskProcessor.TaskScheduler" type="Radoslav.TaskProcessor.Configuration.AppConfig.TaskSchedulerConfigurationSection, Radoslav.TaskProcessor.Configuration.AppConfig" />
  </configSections>

  <Radoslav.TaskProcessor>
    <tasks>
      <add type="Radoslav.TaskProcessor.Model.DemoTask, Radoslav.TaskProcessor.Monitor.Wpf" max="1" />
    </tasks>

    <pollingQueues>
      <add key="Demo" interval="00:00:05" max="5" />
    </pollingQueues>

    <pollingJobs>
      <add type="Radoslav.TaskProcessor.TaskScheduler.TaskSchedulerPollingJob, Radoslav.TaskProcessor.TaskScheduler"
           interval="00:00:01" master="true" />
    </pollingJobs>
  </Radoslav.TaskProcessor>

  <Radoslav.TaskProcessor.Client>
    <tasks>
      <add type="Radoslav.TaskProcessor.Model.DemoTask, Radoslav.TaskProcessor.Monitor.Wpf" />
    </tasks>

    <pollingQueues>
      <add key="Demo">
        <tasks>
          <add type="Radoslav.TaskProcessor.Model.DemoPollingQueueTask, Radoslav.TaskProcessor.Monitor.Wpf" />
        </tasks>
      </add>
    </pollingQueues>
  </Radoslav.TaskProcessor.Client>

  <Radoslav.TaskProcessor.TaskScheduler>
    <scheduledTasks>
      <add type="Radoslav.TaskProcessor.Model.DemoScheduledTask, Radoslav.TaskProcessor.Monitor.Wpf" waitPrevious="true" />
    </scheduledTasks>
  </Radoslav.TaskProcessor.TaskScheduler>

  <Radoslav.ServiceLocator>
    <services>
      <add contract="Radoslav.ServiceLocator.IRadoslavServiceLocator, Radoslav.ServiceLocator"
               implementation="Radoslav.ServiceLocator.RadoslavServiceLocator, Radoslav.ServiceLocator"
               shared="true" />

      <add contract="Radoslav.Timers.ITimer, Radoslav.Helpers"
               implementation="Radoslav.Timers.TimersTimer, Radoslav.Helpers" />

      <add contract="Radoslav.Redis.IRedisProvider, Radoslav.Redis"
           implementation="Radoslav.Redis.ServiceStack.ServiceStackRedisProvider, Radoslav.Redis.ServiceStack" />

      <add contract="Radoslav.TaskProcessor.MessageBus.ITaskProcessorMessageQueue, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskProcessorMessageQueue, Radoslav.TaskProcessor.MessageBus.Redis" />

      <add key="RedisTaskProcessorMessageBusSender"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskProcessorMessageBusSender, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskProcessorMessageBusSender, Radoslav.TaskProcessor.MessageBus.Redis" />

      <add key="RedisTaskProcessorMessageBusReceiver"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskProcessorMessageBusReceiver, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskProcessorMessageBusReceiver, Radoslav.TaskProcessor.MessageBus.Redis" />

      <add key="RedisTaskMessageBusReceiver"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskMessageBusReceiver, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskMessageBusReceiver, Radoslav.TaskProcessor.MessageBus.Redis" />

      <add key="RedisTaskMessageBusSender"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskMessageBusSender, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskMessageBusSender, Radoslav.TaskProcessor.MessageBus.Redis" />

      <add key="RedisTaskMonitoringMessageBusSender"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskMessageBusSender, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskMonitoringMessageBusSender, Radoslav.TaskProcessor.Monitor.Wpf" />

      <add key="RedisTaskMonitoringMessageBusReceiver"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskMessageBusReceiver, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskMonitoringMessageBusReceiver, Radoslav.TaskProcessor.Monitor.Wpf" />

      <add key="RedisTaskProcessorMonitoringMessageBusSender"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskProcessorMessageBusSender, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskProcessorMonitoringMessageBusSender, Radoslav.TaskProcessor.Monitor.Wpf" />

      <add key="RedisTaskProcessorMonitoringMessageBusReceiver"
               contract="Radoslav.TaskProcessor.MessageBus.ITaskProcessorMessageBusReceiver, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.Redis.RedisTaskProcessorMonitoringMessageBusReceiver, Radoslav.TaskProcessor.Monitor.Wpf" />

      <add contract="Radoslav.TaskProcessor.MessageBus.ITaskProcessorMessageBus, Radoslav.TaskProcessor.MessageBus"
               implementation="Radoslav.TaskProcessor.MessageBus.CompositeTaskProcessorMessageBus, Radoslav.TaskProcessor.MessageBus"
               shared="true">

        <properties>
          <collection property="TaskProcessors.Senders" resolveKeys="RedisTaskProcessorMessageBusSender,RedisTaskProcessorMonitoringMessageBusSender" />
          <collection property="TaskProcessors.Receivers" resolveKeys="RedisTaskProcessorMessageBusReceiver,RedisTaskProcessorMonitoringMessageBusReceiver" />
          <collection property="Tasks.Receivers" resolveKeys="RedisTaskMessageBusReceiver,RedisTaskMonitoringMessageBusReceiver" />
          <collection property="Tasks.Senders" resolveKeys="RedisTaskMessageBusSender,RedisTaskMonitoringMessageBusSender" />
        </properties>
      </add>

      <add contract="Radoslav.Diagnostics.IChildProcessKiller, Radoslav.Helpers"
           implementation="Radoslav.Diagnostics.EmptyChildProcessKiller, Radoslav.Helpers" />

      <add contract="Radoslav.TaskProcessor.ITaskExecutor, Radoslav.TaskProcessor"
           implementation="Radoslav.TaskProcessor.TaskProcessExecutor, Radoslav.TaskProcessor">

        <constructor>
          <parameter name="executableFilePath" value="Radoslav.TaskProcessor.TaskWorker.exe" />
        </constructor>

        <properties>
          <set property="CancelTimeout" value="00:00:05" />
        </properties>
      </add>

      <add contract="Radoslav.Serialization.IEntityBinarySerializer, Radoslav.Serialization"
               implementation="Radoslav.Serialization.EntityBinaryJsonSerializer, Radoslav.Serialization" />

      <add contract="Radoslav.TaskProcessor.Repository.ITaskProcessorRepository, Radoslav.TaskProcessor.Repository"
           implementation="Radoslav.TaskProcessor.Repository.Redis.RedisTaskProcessorRepository, Radoslav.TaskProcessor.Repository.Redis" />

      <add contract="Radoslav.TaskProcessor.TaskDistributor.ITaskDistributor, Radoslav.TaskProcessor.TaskDistributor"
           implementation="Radoslav.TaskProcessor.TaskDistributor.DefaultTaskDistributor, Radoslav.TaskProcessor.TaskDistributor" />

      <add contract="Radoslav.DateTimeProvider.IDateTimeProvider, Radoslav.DateTimeProvider"
           implementation="Radoslav.DateTimeProvider.Redis.RedisDateTimeProvider, Radoslav.DateTimeProvider.Redis" />

      <add contract="Radoslav.IApplicationKiller, Radoslav.Helpers"
           implementation="Radoslav.EnvironmentExitApplicationKiller, Radoslav.Helpers" />

      <add contract="Radoslav.Retryable.DelayStrategy.IDelayStrategy, Radoslav.Helpers"
           implementation="Radoslav.Retryable.DelayStrategy.ConstantDelayStrategy, Radoslav.Helpers">

        <constructor>
          <parameter name="delayBetweenRetries" value="00:00:01" />
        </constructor>
      </add>

      <add contract="Radoslav.TaskProcessor.IMasterCommandsProcessor, Radoslav.TaskProcessor"
           implementation="Radoslav.TaskProcessor.MasterCommandsProcessor, Radoslav.TaskProcessor" />

      <add contract="Radoslav.TaskProcessor.Configuration.ITaskProcessorConfigurationProvider, Radoslav.TaskProcessor.Model"
           implementation="Radoslav.TaskProcessor.Configuration.AppConfig.TaskProcessorConfigurationProvider, Radoslav.TaskProcessor.Configuration.AppConfig" />

      <add contract="Radoslav.TaskProcessor.RadoslavTaskProcessor, Radoslav.TaskProcessor"
           implementation="Radoslav.TaskProcessor.RadoslavTaskProcessor, Radoslav.TaskProcessor" />

      <add contract="Radoslav.TaskProcessor.Facade.ITaskProcessorFacade, Radoslav.TaskProcessor.Model"
               implementation="Radoslav.TaskProcessor.Facade.TaskProcessorFacade, Radoslav.TaskProcessor.Facade" />
    </services>
  </Radoslav.ServiceLocator>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>

  <system.diagnostics>
    <trace>
      <listeners>
        <add name="NLog" type="NLog.NLogTraceListener, NLog" />
      </listeners>
    </trace>
  </system.diagnostics>
</configuration>